"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

–°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
- –†–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
"""

import asyncio
import logging
from collections import defaultdict
from datetime import datetime, timedelta
from pathlib import Path
from tempfile import NamedTemporaryFile
from typing import Any, Optional

import pandas as pd
from aiogram import Bot, Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message
from loguru import logger
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload

from bot.config import USER_ID
from bot.handlers.filters import AdminFilter, is_admin
from bot.handlers.keyboards import admin_panel_kb, user_main_kb
from bot.handlers.utils import (format_users_table, generate_users_dataframe,
                               get_system_stats, save_users_to_csv)
from bot.models import User
from bot.scheduler import send_scheduled_message
from database.db import async_session, get_db
from videogeneration.sdapi_cleared import AsyncSDClient

router = Router()
router.message.filter(AdminFilter())

@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    logger.info("Admin panel request from user {}", user_id)
    
    try:
        await message.answer(
            text="‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=admin_panel_kb()
        )
        logger.success("Admin panel displayed for user {}", user_id)
    except Exception as exc:
        logger.error("Failed to show admin panel to user {}: {}", user_id, exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

@router.message(F.text == "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def system_stats(message: types.Message) -> None:
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown."""
    user_id = message.from_user.id
    logger.info("System stats request from user {}", user_id)
    
    try:
        stats = get_system_stats()
        await message.answer(f"```\n{stats}\n```", parse_mode="MarkdownV2")
        logger.success("Stats sent to user {}", user_id)
    except Exception as exc:
        logger.error("Stats error for user {}: {}", user_id, exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: types.Message) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id
    logger.debug("Main menu request from user {}", user_id)
    
    try:
        show_admin_buttons = await is_admin(user_id)
            
        await message.answer(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=user_main_kb(show_admin_buttons)
            )
        logger.success("Main menu shown to user {}", user_id)
    except Exception as exc:
        logger.error("Menu error for user {}: {}", user_id, exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é")

@router.message(F.text == "üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (—Å –∑–∞–≥—Ä—É–∑–∫–æ–π)")
@router.message(F.text == "üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)")
async def handle_video_generation(message: types.Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ."""
    user_id = message.from_user.id
    upload = "–∑–∞–≥—Ä—É–∑–∫–æ–π" in message.text
    logger.info("Video generation request from user {} (upload={})", user_id, upload)
    
    try:
        await send_scheduled_message(bot=bot, user_id=USER_ID, upload=upload)
        status = "–∑–∞–ø—É—â–µ–Ω–∞" if upload else "–∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"
        await message.answer(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {status}")
        logger.success("Video generation started by user {}", user_id)
    except Exception as exc:
        logger.error("Video generation failed for user {}: {}", user_id, exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")

@router.message(Command("grant_admin"))
async def grant_admin_access(
    message: types.Message,
    command: CommandObject,
    bot: Bot
) -> None:
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = message.from_user.id
    logger.info("Admin grant attempt by user {}", user_id)
    
    if not command.args:
        logger.warning("Empty arguments in grant_admin command")
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /grant_admin <user_id>")
    
    try:
        target_user_id = int(command.args)
    except ValueError:
        logger.error("Invalid user ID format: {}", command.args)
        return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    try:
        async with async_session.begin() as session:
            result = await session.execute(
                select(User)
                .where(User.telegram_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                logger.warning("User {} not found", target_user_id)
                return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if user.is_admin:
                logger.info("User {} already admin", target_user_id)
                return await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            user.is_admin = True
            await session.commit()
            
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await bot.send_message(
                chat_id=target_user_id,
                text="üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
            )
            logger.success("Admin rights granted to user {} by {}", target_user_id, user_id)
    except Exception as exc:
        logger.error("Admin grant error: {}", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def handle_users_list(message: Message) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –∏ CSV-—Ñ–∞–π–ª–∞."""
    user_id = message.from_user.id
    logger.info("Users list request from user {}", user_id)
    csv_path: Optional[Path] = None
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(User).order_by(User.created_at.desc())
            )
            users = result.scalars().all()
            
            if not users:
                return await message.answer("üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            table = await format_users_table(users)
            await message.answer(table, parse_mode="MarkdownV2")
            
            try:
                df = generate_users_dataframe(users)
                csv_path = save_users_to_csv(df)
                
                await message.answer_document(
                    document=FSInputFile(csv_path, filename="users.csv"),
                    caption="üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                logger.success("CSV report sent to user {}", user_id)
            except pd.errors.EmptyDataError:
                logger.error("Empty users dataframe")
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    except Exception as exc:
        logger.error("Users list error: {}", exc)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        if csv_path and Path(csv_path).exists():
            Path(csv_path).unlink(missing_ok=True)
            logger.debug("Temporary CSV file removed")

@router.message(F.text == "üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π")
async def logs_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    user_id = message.from_user.id
    logger.info("Logs request from user {}", user_id)
    
    log_file = Path("logs/bot.log")
    tmp_path: Optional[Path] = None
    
    try:
        if not log_file.exists():
            raise FileNotFoundError("Log file not found")
        
        since_time = datetime.now() - timedelta(days=3)
        stats = defaultdict(int)
        error_logs = []
        buffer = []
        
        with log_file.open(encoding="utf-8") as f:
            for line in f:
                if len(buffer) >= 1000:
                    buffer.pop(0)
                buffer.append(line)
                
                try:
                    log_time_str = line.split(" | ")[0]
                    log_time = datetime.strptime(log_time_str, "%Y-%m-%d %H:%M:%S")
                    log_level = line.split(" | ")[1].strip()
                    
                    if log_time >= since_time:
                        stats[log_level] += 1
                        if log_level in {"ERROR", "CRITICAL"}:
                            error_logs.append(line)
                except Exception:
                    continue
        
        with NamedTemporaryFile(mode="w", delete=False, suffix=".log") as tmp:
            tmp.writelines(buffer[-1000:])
            tmp_path = Path(tmp.name)
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è:\n"
            + "\n".join(f"‚Ä¢ {k}: {v}" for k, v in stats.items())
            + (f"\n\nüö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n{''.join(error_logs[-5])}" if error_logs else "")
        )
        
        await message.answer(f"<code>{stats_text}</code>", parse_mode="HTML")
        await message.answer_document(
            document=FSInputFile(tmp_path, filename="recent.log"),
            caption="üìé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
        )
        logger.success("Logs sent to user {}", user_id)
    except FileNotFoundError:
        logger.error("Log file not found")
        await message.answer("‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as exc:
        logger.error("Log processing error: {}", exc)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤: {exc}")
    finally:
        if tmp_path and tmp_path.exists():
            tmp_path.unlink(missing_ok=True)