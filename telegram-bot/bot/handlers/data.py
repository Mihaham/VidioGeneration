import tempfile
import zipfile
from pathlib import Path
from typing import List, Type

import pandas as pd
from aiogram.types import Message, FSInputFile
from aiogram import Router, F
from sqlalchemy import select
from sqlalchemy.orm import DeclarativeMeta
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
from bot.models import Base  # –í–∞—à–∞ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞
from bot.handlers.filters import AdminFilter
from database.db import async_session  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
from bot.handlers.keyboards import BTN_EXCEL_LIST, BTN_CSV_LISTS

router = Router()
router.message.filter(AdminFilter())


def get_all_models() -> List[Type[DeclarativeMeta]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ORM-–º–æ–¥–µ–ª–µ–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏."""
    return [
        mapper.class_
        for mapper in Base.registry.mappers
        if hasattr(mapper.class_, '__tablename__')
    ]

def model_to_dataframe(model_class: Type[DeclarativeMeta], records: list) -> pd.DataFrame:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ ORM –≤ DataFrame."""
    return pd.DataFrame(
        {col.name: [getattr(r, col.name) for r in records]
        for col in model_class.__table__.columns}
    )


@router.message(F.text == BTN_CSV_LISTS)
async def export_all_tables_csv(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ ZIP-–∞—Ä—Ö–∏–≤ —Å CSV —Ñ–∞–π–ª–∞–º–∏."""
    user_id = message.from_user.id
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç CSV –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id)

    try:
        models = get_all_models()
        if not models:
            return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")

        with tempfile.TemporaryDirectory() as tmp_dir:
            tmp_path = Path(tmp_dir)
            zip_file = tmp_path / "all_tables.zip"

            with zipfile.ZipFile(zip_file, 'w') as zipf:
                for model in models:
                    async with async_session() as session:
                        result = await session.execute(select(model))
                        records = result.scalars().all()

                        df = model_to_dataframe(model, records)
                        csv_path = tmp_path / f"{model.__tablename__}.csv"
                        df.to_csv(csv_path, index=False)
                        zipf.write(csv_path, arcname=csv_path.name)

            await message.answer_document(
                FSInputFile(zip_file, filename="tables.zip"),
                caption="üì¶ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ CSV"
            )
            logger.success("CSV –∞—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", user_id)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞: {}", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")


@router.message(F.text == BTN_EXCEL_LIST)
async def export_all_tables_excel(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π Excel."""
    user_id = message.from_user.id
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç Excel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id)
    excel_path = None

    try:
        models = get_all_models()
        if not models:
            return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")

        with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
            excel_path = Path(tmp.name)

            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                for model in models:
                    async with async_session() as session:
                        result = await session.execute(select(model))
                        records = result.scalars().all()

                        df = model_to_dataframe(model, records)
                        df.to_excel(
                            writer,
                            sheet_name=model.__tablename__[:31],
                            index=False
                        )

            await message.answer_document(
                FSInputFile(excel_path, filename="tables.xlsx"),
                caption="üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Excel"
            )
            logger.success("Excel —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", user_id)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞: {}", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    finally:
        if excel_path and excel_path.exists():
            excel_path.unlink()
