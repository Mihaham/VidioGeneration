"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏

–°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è:
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –°–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

from datetime import datetime
from typing import Any, Dict, Optional

from aiogram import Router, types, F
from aiogram.filters import Command
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.models import Message, User
from database.db import async_session
from videogeneration.sdapi_cleared import AsyncSDClient

memory_router = Router()

async def update_user_and_message(
    user_data: types.User, 
    message_text: str
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î.
    
    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_data.id)
    
    try:
        async with async_session.begin() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User)
                .where(User.telegram_id == user_data.id)
            )
            user = result.scalar_one_or_none()

            if not user:
                user = User(
                    telegram_id=user_data.id,
                    username=user_data.username[:50] if user_data.username else None
                )
                session.add(user)
                logger.debug("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", user_data.id)
            else:
                user.username = user_data.username
                user.last_activity = datetime.utcnow()
                logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", user_data.id)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = Message(
                user=user,
                text=message_text[:4096]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            )
            session.add(message)
            
        logger.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {}", user_data.id)
    except Exception as exc:
        logger.critical(
            "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {}: {}",
            user_data.id,
            exc
        )
        raise

def format_memory_value(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã.
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ GB
    """
    if value <= 0:
        return "N/A"
    return f"{value / (1024 ** 3):.2f} GB"

@memory_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏")
@memory_router.message(Command("memory"))
async def handle_memory_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
    user = message.from_user
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user.id)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await update_user_and_message(user, message.text)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏
        async with AsyncSDClient() as sd:
            memory_stats: Dict[str, Any] = await sd.get_memory_stats()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:"]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ RAM –¥–∞–Ω–Ω—ã—Ö
        ram_data = memory_stats.get('ram', {})
        response.extend([
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_memory_value(ram_data.get('used', 0))}",
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {format_memory_value(ram_data.get('free', 0))}",
            f"‚Ä¢ –í—Å–µ–≥–æ: {format_memory_value(ram_data.get('total', 0))}"
        ])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ VRAM –¥–∞–Ω–Ω—ã—Ö
        cuda_data = memory_stats.get('cuda', {})
        response.extend([
            "\nüíª VRAM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–æ: {format_memory_value(cuda_data.get('allocated', {}).get('current', 0))}",
            f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {format_memory_value(cuda_data.get('reserved', {}).get('current', 0))}"
        ])
        
        await message.answer("\n".join(response))
        logger.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", user.id)
        
    except Exception as exc:
        logger.error(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {}: {}",
            user.id,
            exc
        )
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–º—è—Ç–∏")