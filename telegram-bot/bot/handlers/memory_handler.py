from aiogram import Router, types
from aiogram.filters import Command
from database.db import get_db
from bot.models import User, Message
from videogeneration.sdapi_cleared import AsyncSDClient
from sqlalchemy import select
from datetime import datetime
from loguru import logger
from aiogram import Router, types, F

memory_router = Router()

async def update_user_and_message(user_data: types.User, message_text: str):
    async for session in get_db():
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_data.id))
        user = result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_id=user_data.id,
                username=user_data.username
            )
            session.add(user)
        else:
            user.username = user_data.username
            user.last_activity = datetime.utcnow()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            user=user,
            text=message_text
        )
        session.add(message)
        
        await session.commit()


@memory_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏")
@memory_router.message(Command("memory"))
async def handle_memory_command(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_user_and_message(message.from_user, message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–º—è—Ç–∏
    memory_stats = None
    async with AsyncSDClient() as sd:
        memory_stats = await sd.get_memory_stats()
    
    def format_memory(value: float) -> str:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã (1 GB = 1024^3 bytes)
        gb = value / (1024 ** 3)
        return f"{gb:.2f} GB" if gb else "N/A"

    try:
        ram_data = memory_stats.get('ram', {})
        response_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_memory(ram_data.get('used', 0))}\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {format_memory(ram_data.get('free', 0))}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {format_memory(ram_data.get('total', 0))}\n"
            "\nüíª VRAM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—ã–¥–µ–ª–µ–Ω–æ: {format_memory(memory_stats.get('cuda', {}).get('allocated', {}).get('current', 0))}\n"
            f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {format_memory(memory_stats.get('cuda', {}).get('reserved', {}).get('current', 0))}"
        )
    except Exception as e:
        logger.error(f"Error parsing memory data: {str(e)}")
        response_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

    await message.answer(response_text)