import os
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from bot.handlers.filters import OwnerFilter
from bot.handlers.keyboards import BTN_AUTHORIZATION
from videogeneration.config import TOKEN_FILE
from videogeneration.upload_video import upload_video
from loguru import logger

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']  # –í–∞—à–∏ scopes
TOKEN_DIR = "tokens"
os.makedirs(TOKEN_DIR, exist_ok=True)

router = Router()
router.message.filter(OwnerFilter())

class AuthStates(StatesGroup):
    waiting_auth_code = State()


async def get_authenticated_service(user_id: int, state: FSMContext = None) -> Credentials:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ FSM"""
    creds = None

    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if creds and creds.valid:
        return creds

    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if state:
        await start_auth_flow(user_id, state)
    return None


async def start_auth_flow(user_id: int, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    flow = Flow.from_client_secrets_file(
        'client_secrets.json',
        scopes=SCOPES,
        redirect_uri='urn:ietf:wg:oauth:2.0:oob'
    )
    auth_url, _ = flow.authorization_url(prompt='consent')

    await state.set_state(AuthStates.waiting_auth_code)
    await state.update_data(flow=flow, user_id=user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    message = await state.bot.send_message(
        chat_id=user_id,
        text=f"üîë [–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è] –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{auth_url}\n\n"
             "–ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=auth_url)
        ]])
    )
    await state.update_data(auth_message_id=message.message_id)


@router.message(F.text == BTN_AUTHORIZATION)
async def auth_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    creds = await get_authenticated_service(user_id, state)

    if creds:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã - –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ start_auth_flow


@router.message(AuthStates.waiting_auth_code)
async def handle_auth_code(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        flow = user_data['flow']
        user_id = user_data['user_id']
        auth_message_id = user_data.get('auth_message_id', 0)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ –∫–æ–¥—É
        flow.fetch_token(code=message.text.strip())
        creds = flow.credentials

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await message.bot.delete_message(chat_id=user_id, message_id=auth_message_id)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–µ–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        if 'pending_video' in user_data:
            video_data = user_data['pending_video']
            await upload_video_wrapper(
                bot=message.bot,
                user_id=user_id,
                state=state,
                video_path=video_data['video_path'],
                title=video_data['title'],
                description=video_data['description']
            )

        await state.clear()

    except Exception as e:
        logger.exception("Auth code processing error")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /auth")
        await state.clear()

async def upload_video_wrapper(
        bot: Bot,
        user_id: int,
        state: FSMContext,
        video_path: str,
        title: str,
        description: str
):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    creds = await get_authenticated_service(user_id, state)

    if not creds:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data({
            "pending_video": {
                "video_path": video_path,
                "title": title,
                "description": description
            }
        })
        await bot.send_message(
            chat_id=user_id,
            text="üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    try:
        video_id = upload_video(
            creds=creds,
            video_path=video_path,
            title=title,
            privacy="public",
            description=description
        )
        await bot.send_message(
            chat_id=user_id,
            text=f"üé• –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: https://www.youtube.com/watch?v={video_id}"
        )
        logger.success(f"–í–∏–¥–µ–æ {video_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube")
    except Exception as upload_exc:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {}", upload_exc)
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(upload_exc)}"
        )