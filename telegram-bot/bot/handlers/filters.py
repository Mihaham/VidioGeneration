"""
–ú–æ–¥—É–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –§—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Aiogram
"""

from typing import Any, Optional, cast

from aiogram import Router, types, Bot
from aiogram.filters import Filter
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.models import User
from database.db import async_session
from bot.config import USER_ID

class AdminFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    @router.message(AdminFilter())
    async def admin_handler(message: types.Message):
        ...
    """

    async def __call__(self, update: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        if not isinstance(update, types.Message):
            return False
            
        user_id = update.from_user.id
        return await is_admin(user_id)


class OwnerFilter(Filter):
    """–§–∏–ª—å—Ç—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    @router.message(OwnerFilter())
    async def owner_handler(message: types.Message):
        ...
    """

    async def __call__(self, update: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        if not isinstance(update, types.Message):
            return False

        user_id = update.from_user.id
        return is_owner(user_id)

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Raises:
        RuntimeError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    """
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user_id)
    
    try:
        async with async_session() as session:
            session = cast(AsyncSession, session)
            result = await session.execute(
                select(User.is_admin)
                .where(User.telegram_id == user_id)
                .limit(1)
            )
            user: Optional[bool] = result.scalar_one_or_none()
            
            if user is None:
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω", user_id)
                return False

            #–î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –æ–Ω –º–æ–≥ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏
            user = user or (int(USER_ID) == int(user_id))
            logger.info(
                "–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {}: {}",
                user_id,
                "GRANTED" if user else "DENIED"
            )
            return user
            
    except Exception as exc:
        logger.opt(exception=True).critical(
                "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "User ID: {}\n"
                "Exception Type: {}\n"
                "Exception Message: {}\n"
                "Stack Trace:",
                user_id,
                type(exc).__name__,
                str(exc)
            )
        return False


def is_owner(user_id: int) -> bool:
    """Does user is owner?"""
    return user_id == USER_ID


async def duplicate_to_owner(
        bot: Bot,
        user_id: int,
        method: str,
        *args: Any,
        **kwargs: Any
) -> None:
    """
    –î—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    - method: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('message', 'photo', 'audio' –∏ —Ç.–¥.)
    - *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
    - –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ—à–∏–±–∫–∏
    """
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if user_id == USER_ID:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (ID {user_id}), –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    send_method_name = f"send_{method}"
    if not hasattr(bot, send_method_name):
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: '{method}'")
        return

    send_method = getattr(bot, send_method_name)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    send_kwargs = kwargs.copy()
    send_kwargs['chat_id'] = USER_ID

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
    caption = send_kwargs.get('caption', '')
    if caption:
        caption = f"üë§ –î–ª—è: {user_id}\n\n" + caption
    else:
        caption = f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"

    # –î–ª—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º caption/—Ç–µ–∫—Å—Ç
    if method in {'photo', 'audio', 'document', 'video'}:
        send_kwargs['caption'] = caption
    elif method == 'message':
        send_kwargs['text'] = f"üë§ –î–ª—è: {user_id}\n\n{kwargs.get('text', '')}"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
        await send_method(*args, **send_kwargs)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É. –¢–∏–ø: {method}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ({method} –¥–ª—è {user_id}): {str(e)}")