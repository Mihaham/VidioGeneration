import psutil
import platform
from datetime import datetime
import GPUtil
from typing import Optional
from loguru import logger
import tempfile
import os
from bot.models import User
import pandas as pd
from textwrap import dedent

def bytes_to_gb(bytes: int) -> float:
    return bytes / (1024 ** 3)

def get_gpu_info() -> Optional[str]:
    try:
        gpus = GPUtil.getGPUs()
        if not gpus:
            return None
            
        gpu_info = []
        for i, gpu in enumerate(gpus):
            gpu_info.append(
                f"üéÆ GPU {i} ({gpu.name}):\n"
                f"   ‚ñ™Ô∏èLoad: {gpu.load*100:.1f}% | üå°Ô∏èTemp: {gpu.temperature}¬∞C\n"
                f"   ‚ñ™Ô∏èVRAM: {gpu.memoryUsed:.1f}/{gpu.memoryTotal:.1f} GB"
            )
        return "\n".join(gpu_info)
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting GPU info: {e}")
        return None

def get_system_stats() -> str:
    # CPU
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_freq = psutil.cpu_freq()
    cpu_cores = psutil.cpu_count(logical=False)
    cpu_threads = psutil.cpu_count(logical=True)
    
    # Memory
    mem = psutil.virtual_memory()
    swap = psutil.swap_memory()
    
    # Disk
    disk = psutil.disk_usage('/')
    
    # Network
    net_io = psutil.net_io_counters()
    
    # Temperatures
    try:
        temps = psutil.sensors_temperatures()
    except AttributeError:
        temps = None
    
    # Boot Time
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    
    # GPU Info
    gpu_stats = get_gpu_info()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    stats = [
        "üñ•Ô∏è *System Statistics* üñ•Ô∏è",
        f"‚è∞ Boot Time: `{boot_time.strftime('%Y-%m-%d %H:%M:%S')}`",
        f"üîß OS: `{platform.system()} {platform.release()}`",
        "",
        "üî• *CPU Usage* üî•",
        f"‚ñ™Ô∏è Total Usage: `{cpu_percent}%`",
        f"‚ñ™Ô∏è Cores: `{cpu_cores}` | Threads: `{cpu_threads}`",
        f"‚ñ™Ô∏è Frequency: `{cpu_freq.current:.2f} MHz`" if cpu_freq else "",
        "",
        "üíæ *Memory Usage* üíæ",
        f"‚ñ™Ô∏è Total: `{bytes_to_gb(mem.total):.2f} GB`",
        f"‚ñ™Ô∏è Used: `{bytes_to_gb(mem.used):.2f} GB` (`{mem.percent}%`)",
        f"‚ñ™Ô∏è Available: `{bytes_to_gb(mem.available):.2f} GB`",
        f"üîÑ Swap: `{bytes_to_gb(swap.used):.2f}/{bytes_to_gb(swap.total):.2f} GB` (`{swap.percent}%`)",
        "",
        "üíΩ *Disk Usage* üíΩ",
        f"‚ñ™Ô∏è Total: `{bytes_to_gb(disk.total):.2f} GB`",
        f"‚ñ™Ô∏è Used: `{bytes_to_gb(disk.used):.2f} GB` (`{disk.percent}%`)",
        f"‚ñ™Ô∏è Free: `{bytes_to_gb(disk.free):.2f} GB`",
        "",
        "üåê *Network* üåê",
        f"üì§ Sent: `{bytes_to_gb(net_io.bytes_sent):.2f} GB`",
        f"üì• Received: `{bytes_to_gb(net_io.bytes_recv):.2f} GB`",
    ]
    
    # GPU
    if gpu_stats:
        stats.extend(["", "üéÆ *GPU Info* üéÆ", gpu_stats])
    
    # Temperature
    if temps:
        stats.extend(["", "üå°Ô∏è *Temperatures* üå°Ô∏è"])
        for name, entries in temps.items():
            for entry in entries:
                stats.append(f"‚ñ™Ô∏è {entry.label or name}: `{entry.current}¬∞C`")
    
    return "\n".join(stats)

async def format_users_table(users: list[User]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = ["ID", "Telegram ID", "Username", "Admin", "Created", "Last Active"]
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    widths = [4, 12, 15, 5, 19, 19]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    header = "|".join(f" {h.ljust(w)} " for h, w in zip(headers, widths))
    separator = "+".join("-" * (w + 2) for w in widths)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    rows = []
    for user in users:
        created = user.created_at.strftime("%Y-%m-%d %H:%M")
        last_active = user.last_activity.strftime("%Y-%m-%d %H:%M") if user.last_activity else "Never"
        
        row = (
            str(user.id).ljust(widths[0]),
            str(user.telegram_id).ljust(widths[1]),
            (user.username or "-")[:widths[2]-1].ljust(widths[2]),
            "‚úì" if user.is_admin else "‚úó".center(widths[7]),
            created.ljust(widths[4]),
            last_active.ljust(widths[5])
        )
        rows.append("|".join(f" {cell} " for cell in row))
    
    # –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    return dedent(f"""
        ``` 
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã ({len(users)})
        {separator}
        {header}
        {separator}
        {chr(10).join(rows)}
        {separator}
        ```
    """).strip()

def generate_users_dataframe(users: list[User]) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ—Ç DataFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ DataFrame –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    data = []
    for user in users:
        data.append({
            "ID": user.id,
            "Telegram ID": user.telegram_id,
            "Username": user.username or "-",
            "Admin": "–î–∞" if user.is_admin else "–ù–µ—Ç",
            "Created At": user.created_at.strftime("%Y-%m-%d %H:%M"),
            "Last Activity": user.last_activity.strftime("%Y-%m-%d %H:%M") if user.last_activity else "–ù–∏–∫–æ–≥–¥–∞"
        })
    
    df = pd.DataFrame(data)
    logger.success(f"DataFrame —Å–æ–∑–¥–∞–Ω —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
    return df

def save_users_to_csv(df: pd.DataFrame) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fd, path = tempfile.mkstemp(suffix=".csv")
        os.close(fd)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        df.to_csv(path, index=False, encoding='utf-8-sig')
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª: {path}")
        return path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {str(e)}")
        raise
