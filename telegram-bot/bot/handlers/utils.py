"""
–ú–æ–¥—É–ª—å —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –°–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –≠–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""

import os
import platform
from datetime import datetime
from textwrap import dedent
from typing import List, Optional, Dict, Any
import tempfile

import GPUtil
import pandas as pd
import psutil
from loguru import logger

from bot.models import User


def bytes_to_gb(bytes_value: int) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã.
    
    Args:
        bytes_value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    """
    return bytes_value / (1024 ** 3)


def get_gpu_info() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU.
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        gpus = GPUtil.getGPUs()
        if not gpus:
            return None
            
        gpu_info = []
        for i, gpu in enumerate(gpus):
            gpu_info.append(
                f"üéÆ GPU {i} ({gpu.name}):\n"
                f"   ‚ñ™Ô∏èLoad: {gpu.load*100:.1f}% | üå°Ô∏èTemp: {gpu.temperature}¬∞C\n"
                f"   ‚ñ™Ô∏èVRAM: {gpu.memoryUsed:.1f}/{gpu.memoryTotal:.1f} GB"
            )
        return "\n".join(gpu_info)
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GPU: {exc}")
        return None


def get_system_stats() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ Markdown
    """
    stats: List[str] = []
    
    try:
        # CPU Information
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq()
        cpu_cores = psutil.cpu_count(logical=False) or 0
        cpu_threads = psutil.cpu_count(logical=True) or 0

        # Memory Information
        mem = psutil.virtual_memory()
        swap = psutil.swap_memory()

        # Disk Information
        disk = psutil.disk_usage('/')

        # Network Information
        net_io = psutil.net_io_counters()

        # System Information
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        os_info = f"{platform.system()} {platform.release()}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = [
            "üñ•Ô∏è *System Statistics* üñ•Ô∏è",
            f"‚è∞ Boot Time: `{boot_time.strftime('%Y-%m-%d %H:%M:%S')}`",
            f"üîß OS: `{os_info}`",
            "",
            "üî• *CPU Usage* üî•",
            f"‚ñ™Ô∏è Total Usage: `{cpu_percent}%`",
            f"‚ñ™Ô∏è Cores: `{cpu_cores}` | Threads: `{cpu_threads}`",
            f"‚ñ™Ô∏è Frequency: `{cpu_freq.current:.2f} MHz`" if cpu_freq else "",
        ]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö
        sections: List[Dict[str, Any]] = [
            {
                "title": "üíæ Memory Usage",
                "items": [
                    ("Total", mem.total),
                    ("Used", mem.used),
                    ("Available", mem.available)
                ]
            },
            {
                "title": "üíΩ Disk Usage",
                "items": [
                    ("Total", disk.total),
                    ("Used", disk.used),
                    ("Free", disk.free)
                ]
            },
            {
                "title": "üåê Network",
                "items": [
                    ("Sent", net_io.bytes_sent),
                    ("Received", net_io.bytes_recv)
                ]
            }
        ]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π
        for section in sections:
            stats.extend(["", f"{section['title']} {section['title'][0]}"])
            for label, value in section["items"]:
                stats.append(
                    f"‚ñ™Ô∏è {label}: `{bytes_to_gb(value):.2f} GB`"
                )

        # GPU Information
        if gpu_stats := get_gpu_info():
            stats.extend(["", "üéÆ *GPU Info* üéÆ", gpu_stats])

        # Temperature Information
        if temps := psutil.sensors_temperatures():
            stats.extend(["", "üå°Ô∏è *Temperatures* üå°Ô∏è"])
            for name, entries in temps.items():
                for entry in entries:
                    stats.append(f"‚ñ™Ô∏è {entry.label or name}: `{entry.current}¬∞C`")

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {exc}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    return "\n".join(filter(None, stats))


async def format_users_table(users: List[User]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ User
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ Markdown
    """
    logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    columns = [
        ("ID", 4, lambda u: str(u.id)),
        ("Telegram ID", 12, lambda u: str(u.telegram_id)),
        ("Username", 15, lambda u: (u.username or "-")[:14]),
        ("Admin", 5, lambda u: "‚úì" if u.is_admin else "‚úó"),
        ("Created", 19, lambda u: u.created_at.strftime("%Y-%m-%d %H:%M")),
        ("Last Active", 19, lambda u: u.last_activity.strftime("%Y-%m-%d %H:%M") 
            if u.last_activity else "Never")
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header = "|".join(f" {col[0].ljust(col[1])} " for col in columns)
    separator = "+".join("-" * (col[1] + 2) for col in columns)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
    rows = []
    for user in users:
        row = "|".join(
            f" {str(col[2](user)).ljust(col[1])} " 
            for col in columns
        )
        rows.append(row)
        
    data = "\n".join(rows)

    return dedent(f"""
        ```
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã ({len(users)})
        {separator}
        {header}
        {separator}
        {data}
        {separator}
        ```
    """).strip()


def generate_users_dataframe(users: List[User]) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ User
        
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))
    
    data = [{
        "ID": user.id,
        "Telegram ID": user.telegram_id,
        "Username": user.username or "-",
        "Admin": "–î–∞" if user.is_admin else "–ù–µ—Ç",
        "Created At": user.created_at.strftime("%Y-%m-%d %H:%M"),
        "Last Activity": user.last_activity.strftime("%Y-%m-%d %H:%M") 
            if user.last_activity else "–ù–∏–∫–æ–≥–¥–∞"
    } for user in users]

    return pd.DataFrame(data)


def save_users_to_csv(df: pd.DataFrame) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV —Ñ–∞–π–ª.
    
    Args:
        df: DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Raises:
        IOError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
    """
    fd, path = None, None
    try:
        fd, path = tempfile.mkstemp(suffix=".csv")
        df.to_csv(path, index=False, encoding='utf-8-sig')
        logger.success("CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {}", path)
        return path
    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {}", exc)
        raise IOError("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ CSV —Ñ–∞–π–ª–∞") from exc
    finally:
        if fd:
            os.close(fd)