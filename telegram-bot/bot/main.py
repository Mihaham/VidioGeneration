import asyncio
from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bot.config import TOKEN, USER_ID, TIMEZONE
from bot.logger_setup import logger
from bot.scheduler import setup_scheduler, send_scheduled_message
from bot.handlers import memory_handler, admin, common
from database.db import init_db

async def on_startup(bot: Bot, scheduler: AsyncIOScheduler):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await bot.send_message(chat_id=USER_ID, text=f"üü¢Bot started‚úî")
    #await send_scheduled_message(bot, USER_ID)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    setup_scheduler(scheduler, bot, USER_ID)
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

async def main():
    await init_db()

    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    dp.include_routers(memory_handler.memory_router, admin.router, common.router)
    
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    
    try:
        await on_startup(bot, scheduler)
        await dp.start_polling(bot)
    finally:
        if scheduler.running:
            scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")