"""
–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –ó–∞–¥–∞—á–∏ –¥–ª—è cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏
"""

import asyncio
import time
from pathlib import Path
from typing import List, Optional, Tuple

from aiogram import Bot
from aiogram.types import FSInputFile, Message
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.context import FSMContext
from apscheduler.job import Job
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from loguru import logger
from moviepy.editor import VideoFileClip

from bot.config import TIMEZONE
from bot.handlers.google_auth import upload_video_wrapper
from videogeneration.main import generate_video
from videogeneration.upload_video import upload_video

from tests.test_notebook import TOKEN_FILE


async def get_video_duration(video_path: Path) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    
    Args:
        video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        
    Returns:
        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(
        None, 
        lambda: VideoFileClip(str(video_path)).duration
    )

async def send_photos_group(bot: Bot, user_id: int, photos_paths: List[Path]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        photos_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """
    for i in range(0, len(photos_paths), 10):
        chunk = photos_paths[i:i+10]
        media_group = MediaGroupBuilder(caption=f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {i//10 + 1}")
        
        for photo in chunk:
            media_group.add_photo(media=FSInputFile(photo))
        
        try:
            await bot.send_media_group(
                chat_id=user_id,
                media=media_group.build()
            )
            await asyncio.sleep(5)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as exc:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {}", exc)


async def send_scheduled_message(bot: Bot, user_id: int, upload: bool = True) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        upload: –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    """
    logger.info("–ù–∞—á–∞–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
    await bot.send_message(chat_id=user_id, text="‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...")
    
    video_path: Optional[Path] = None
    photos_paths: List[Path] = []
    title, description = "", ""
    
    try:
        while True:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
            result = await asyncio.to_thread(generate_video)
            video_path, photos_paths, title, description = result
            video_path = Path(video_path)
            
            if not video_path.exists():
                raise FileNotFoundError(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = await get_video_duration(video_path)
            duration_minutes = duration / 60
            
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
                await bot.send_video(
                    chat_id=user_id,
                    video=FSInputFile(video_path),
                    caption="üé• –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                # await send_photos_group(bot, user_id, photos_paths)
                
                if 0.5 < duration_minutes < 1:
                    logger.success("–í–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                    break
                
                await bot.send_message(
                    chat_id=user_id,
                    text="‚ö†Ô∏è –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
                )
                
            except Exception as send_exc:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {}", send_exc)
                continue

    except Exception as gen_exc:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç—Ä–µ–π—Å–±—ç–∫–æ–º
        logger.opt(exception=True).critical(
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (user_id={})",
            user_id
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = (
            f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            f"‚Ä¢ –¢–∏–ø: {type(gen_exc).__name__}\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {str(gen_exc)}\n"
            f"‚Ä¢ –§–∞–π–ª: {gen_exc.__traceback__.tb_frame.f_code.co_filename}\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {gen_exc.__traceback__.tb_lineno}"
        )

        await bot.send_message(
            chat_id=user_id,
            text=error_message
        )
                
    if upload and video_path:
        await upload_video_wrapper(
            bot=bot,
            user_id=user_id,
            state=state,
            video_path=video_path,
            title=title,
            description=description
        )

def setup_scheduler(scheduler: AsyncIOScheduler, bot: Bot, user_id: int) -> Job:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    
    Args:
        scheduler: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    Returns:
        –°–æ–∑–¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    return scheduler.add_job(
        send_scheduled_message,
        trigger=CronTrigger(
            day_of_week="tue,fri",
            hour=12,
            minute=0,
            timezone=TIMEZONE
        ),
        args=[bot, user_id],
        max_instances=1,
        coalesce=True,
        replace_existing=True
    )