import asyncio
from pathlib import Path
from typing import Tuple, Optional, List
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageOps
from loguru import logger
from videogeneration.utils import get_next_free_path
from videogeneration.config import GIGACHAT_CREDENTIALS, CA_BUNDLE_FILE
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è GigaChat
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
import time
import re
import emoji
import numpy as np
import requests
import unicodedata
import random

class CoverGenerator:
    def __init__(self):
        self.credentials = GIGACHAT_CREDENTIALS
        self.ca_bundle = CA_BUNDLE_FILE
        self.font_path = "fonts/Roboto-Medium.ttf"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
        self.emoji_mapping = {
            "sea": "üåä",
            "mountain": "‚õ∞Ô∏è",
            "space": "üöÄ",
            "future": "üîÆ",
            "nature": "üåø"
        }

    def _construct_system_prompt(self) -> str:
        return """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è YouTube-—Ä–æ–ª–∏–∫–æ–≤. –°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:
    1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—É—Ç—å –ø—Ä–æ–º–ø—Ç–∞
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–≥–æ –∏–∑ 3-5 —Å–ª–æ–≤
    3. –ò—Å–ø–æ–ª—å–∑—É–π: –¶–∏—Ñ—Ä—ã, –≤–æ–ø—Ä–æ—Å—ã, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    4. –î–æ–±–∞–≤–ª—è–π 1-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
    5. –ó–∞–ø—Ä–µ—â–µ–Ω—ã: –ü–µ—Ä–µ–Ω–æ—Å—ã —Å–ª–æ–≤, —Å–ª—ç—à–∏, —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã

    –§–æ—Ä–º–∞—Ç: [–ó–∞–≥–æ–ª–æ–≤–æ–∫] [–≠–º–æ–¥–∑–∏]
    –ü—Ä–∏–º–µ—Ä—ã:
    - "–®–û–ö! 5 —Å–µ–∫—Ä–µ—Ç–æ–≤ –ò–ò, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –≤—Å—ë ü§Øüíª"
    - "–ö–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤–∏–¥—è—Ç –±—É–¥—É—â–µ–µ? üîÆüëÅÔ∏è"
    - "2077: –ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Ä–æ—Ä—ã–≤ –≤ 3D üí•üöÄ"
    """

    def extract_text_and_emojis(self, input_str: str) -> Tuple[str, str]:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–º–æ–¥–∑–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
        emoji_info = emoji.emoji_list(input_str)
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
        text_chars = []
        emoji_chars = []
        
        last_position = 0
        for info in emoji_info:
            start = info['match_start']
            end = info['match_end']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —ç–º–æ–¥–∑–∏
            text_chars.append(input_str[last_position:start])
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
            emoji_chars.append(input_str[start:end])
            
            last_position = end
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–º–æ–¥–∑–∏
        text_chars.append(input_str[last_position:])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        clean_text = ''.join(text_chars).strip()
        all_emojis = "üî•" + ''.join(emoji_chars)
        
        # –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        clean_text = ' '.join(clean_text.split())
        
        return clean_text[1:-1], all_emojis

    def generate_clickbait_title(self, prompt: str) -> Tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª–∏–∫–±–µ–π—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        logger.info("Starting title generation for prompt: {}", prompt[:50])
        
        try:
            with GigaChat(
                credentials=self.credentials,
                ca_bundle_file=self.ca_bundle,
                verify_ssl_certs=True
            ) as model:
                chat = Chat(
                    messages=[
                        Messages(role=MessagesRole.SYSTEM, content=self._construct_system_prompt()),
                        Messages(role=MessagesRole.USER, content=f"–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è: {prompt}")
                    ],
                    temperature=0.9,  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    max_tokens=80     # –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
                )
                
                response = model.chat(chat)
                full_text = response.choices[0].message.content.strip()
                logger.success("Generated title: {}", full_text)
                
                return self.extract_text_and_emojis(full_text)
                
        except Exception as e:
            logger.error("GigaChat error: {}", str(e))
            return ("–ò–ò –†–µ–≤–æ–ª—é—Ü–∏—è: " + prompt[:12], "‚ú®")

    def _load_and_process_image(self, image_path: str) -> Image.Image:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        logger.debug("Processing image: {}", image_path)
        
        try:
            img = Image.open(image_path)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ
            return img.filter(ImageFilter.GaussianBlur(radius=5))
        except Exception as e:
            logger.critical("Image processing failed: {}", str(e))
            raise

    def _add_text_to_image(
        self, 
        image: Image.Image,
        title: str,
        emoji: str
    ) -> Image.Image:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        try:
            draw = ImageDraw.Draw(image)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
            font_size = 48
            try:
                font = ImageFont.truetype(self.font_path, font_size)
            except IOError:
                font = ImageFont.load_default()
                logger.warning("Using fallback font")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            text = f"{title}\n{emoji}"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (image.width - text_width) // 2
            y = image.height // 8

            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä
            stroke_width = 3
            draw.text(
                (x, y), text, font=font, fill="white",
                stroke_width=stroke_width, stroke_fill="black"
            )
            
            return image
        except Exception as e:
            logger.error("Text rendering error: {}", str(e))
            return image

    def _save_cover(
        self,
        image: Image.Image,
        output_dir: str = "output/covers"
    ) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏."""
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        buffer.seek(0)
        
        save_path = get_next_free_path(output_dir, prefix="cover_")
        with open(save_path, "wb") as f:
            f.write(buffer.getvalue())
            
        logger.info("Cover saved to: {}", save_path)
        return save_path

    async def generate_first_page(
        self,
        prompt: str,
        initial_photo: str
    ) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏."""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            title, emoji = await self.generate_clickbait_title(prompt)
            logger.debug(f"Using title: {title} {emoji}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = await asyncio.to_thread(self._load_and_process_image, initial_photo)
            img = await asyncio.to_thread(self._add_text_to_image, img, title, emoji)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return await asyncio.to_thread(self._save_cover, img)
            
        except Exception as e:
            logger.critical("Cover generation failed: {}", str(e))
            return None
        
import math
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageColor
from loguru import logger
from pathlib import Path

class CoverGeneratorEnhanced(CoverGenerator):
    def __init__(self):
        super().__init__()
        self.fonts = self._load_fonts()
        self.emoji_cache = {}
        
    def _load_fonts(self) -> dict:
        """–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        font_paths = {
            'Roboto': self._find_font('Roboto-Regular.ttf'),
            'Arial': self._find_font('arial.ttf'),
            'DejaVu': self._find_font('DejaVuSans-Bold.ttf')
        }
        logger.info(f"Found fonts: {font_paths}")
        return {name: path for name, path in font_paths.items() if path}

    def _find_font(self, filename: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
        paths = [
            Path(__file__).parent / 'fonts' / filename,
            Path.home() / '.fonts' / filename,
            Path('/usr/share/fonts/truetype') / filename,
            Path('C:/Windows/Fonts') / filename,
            Path(f'fonts/{filename}')
        ]
        for path in paths:
            if path.exists():
                return str(path)
        return None

    def _generate_emoji(self, char: str, size: int) -> Image.Image:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ Twemoji CDN"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–¥ —Ç–æ—á–∫–∏ Unicode
            code_point = ord(char)
            hex_code = f"{code_point:x}"
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            if unicodedata.category(char) == 'So':
                hex_code = hex_code.lstrip('0').lower()
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Twemoji
            url = f"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/{hex_code}.png"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = requests.get(url, timeout=3)
            response.raise_for_status()
            
            emoji_img = Image.open(BytesIO(response.content)).convert("RGBA")
            return emoji_img.resize((size, size), Image.Resampling.LANCZOS)
            
        except Exception as e:
            logger.error(f"Emoji load error: {str(e)}")
            return self._create_fallback_emoji(size)

    def _create_fallback_emoji(self, size: int) -> Image.Image:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è —ç–º–æ–¥–∑–∏-–∑–∞–≥–ª—É—à–∫–∞"""
        img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        draw.ellipse((0, 0, size, size), fill='#FFD700')
        return img

    def _get_emoji_image(self, emoji_char: str, size: int) -> Image.Image:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏"""
        cache_key = f"{emoji_char}_{size}"
        if cache_key not in self.emoji_cache:
            self.emoji_cache[cache_key] = self._generate_emoji(emoji_char, size)
        return self.emoji_cache[cache_key]

    def _create_gradient(self, width: int, height: int) -> Image.Image:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥–ª–æ–∂–∫–∏"""
        gradient = Image.new('RGBA', (width, height))
        draw = ImageDraw.Draw(gradient)
        
        for i in range(height):
            alpha = int(255 * (1 - i/height))
            draw.line([(0, i), (width, i)], fill=(0, 0, 0, alpha))
        
        return gradient

    def _calculate_text_size(self, lines: List[str], font: ImageFont.FreeTypeFont, line_spacing: float) -> Tuple[int, int]:
        """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞"""
        line_heights = [font.getbbox(line)[3] - font.getbbox(line)[1] for line in lines]
        max_line_height = max(line_heights)
        total_height = int(sum([h * line_spacing for h in line_heights]))
        max_width = max(font.getlength(line) for line in lines)
        return int(max_width), int(total_height)

    def _split_long_word(self, word: str, font: ImageFont.FreeTypeFont, max_width: int, lines: List[str]):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        current_part = ''
        for char in word:
            # –£—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            test_part = current_part + char
            if font.getlength(test_part) <= max_width:
                current_part = test_part
            else:
                if current_part:
                    lines.append(current_part)
                current_part = char
                
                # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —à–∏—Ä–µ max_width
                if font.getlength(char) > max_width:
                    lines.append(char)
                    current_part = ''

        if current_part:
            lines.append(current_part)

    def _wrap_text(self, text: str, font: ImageFont.FreeTypeFont, max_width: int) -> List[str]:
        """–°—Ç—Ä–æ–≥–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã—Ö —Å–ª–æ–≤"""
        words = text.split()
        lines = []
        current_line = []
        
        for word in words:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —Å–ª–æ–≤–∞ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            test_line = ' '.join(current_line + [word])
            test_width = font.getlength(test_line)
            
            if test_width <= max_width:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç —Ü–µ–ª–∏–∫–æ–º - —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
                if font.getlength(word) > max_width:
                    return self._handle_long_word(word, font, max_width)
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        return lines

    def _handle_long_word(self, word: str, font: ImageFont.FreeTypeFont, max_width: int) -> List[str]:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        for font_size in range(font.size, 20, -2):
            new_font = self._get_best_font(font_size)
            if new_font.getlength(word) <= max_width:
                return [word]
        return [word[:15] + "‚Ä¶"]  # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π

    def _get_best_font(self, font_size: int) -> ImageFont.FreeTypeFont:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        fallback_fonts = [
            'arial.ttf', 
            'Roboto-Regular.ttf',
            'DejaVuSans.ttf',
            'times.ttf'
        ]
        
        for font_file in fallback_fonts:
            try:
                path = self._find_font(font_file)
                if path:
                    return ImageFont.truetype(path, font_size, encoding='unic')
            except Exception as e:
                continue
                
        return ImageFont.load_default()

    def _calculate_text_size(self, lines: List[str], font: ImageFont.FreeTypeFont, line_spacing: float) -> Tuple[int, int]:
        """–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        max_width = 0
        total_height = 0
        
        for line in lines:
            bbox = font.getbbox(line)
            line_width = bbox[2] - bbox[0]
            line_height = bbox[3] - bbox[1]
            
            if line_width > max_width:
                max_width = line_width
                
            total_height += int(line_height * line_spacing)
            
        return max_width, total_height

    def _split_long_word(self, word: str, font: ImageFont.FreeTypeFont, max_width: int, lines: List[str]):
        """–†–∞–∑–±–∏–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        current_part = ''
        for char in word:
            if font.getlength(current_part + char) <= max_width:
                current_part += char
            else:
                if current_part:
                    lines.append(current_part)
                current_part = char
        if current_part:
            lines.append(current_part)

    def _add_text_layer(self, base_image: Image.Image, text: str) -> Image.Image:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        img = base_image.copy()
        draw = ImageDraw.Draw(img)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        padding = 40
        max_width = img.width - 2 * padding
        max_height = img.height - 2 * padding
        line_spacing = 1.3
        min_font_size = 28
        
        # –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        best_settings = None
        for font_size in range(72, min_font_size - 1, -2):
            font = self._get_best_font(font_size)
            lines = self._wrap_text(text, font, max_width)
            
            if not lines:
                continue
                
            text_width, text_height = self._calculate_text_size(lines, font, line_spacing)
            
            if text_width <= max_width and text_height <= max_height:
                best_settings = (font, lines, font_size)
                break

        if not best_settings:
            font = self._get_best_font(min_font_size)
            lines = self._wrap_text(text, font, max_width)
            best_settings = (font, lines, min_font_size)

        font, lines, font_size = best_settings
        
        # –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏
        text_width, text_height = self._calculate_text_size(lines, font, line_spacing)
        x = (img.width - text_width) // 2
        y = (img.height - text_height) // 2
        
        # –§–æ–Ω–æ–≤–∞—è –ø–æ–¥–ª–æ–∂–∫–∞
        bg = Image.new('RGBA', img.size, (0, 0, 0, 120))
        img = Image.alpha_composite(img.convert('RGBA'), bg)
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–Ω—Ç—É—Ä–æ–º
        stroke_width = max(1, font_size // 25)
        line_height = font.getbbox('A')[3] * line_spacing
        
        for i, line in enumerate(lines):
            line_x = x + (max_width - font.getlength(line)) // 2
            line_y = y + i * line_height
            draw.text(
                (line_x, line_y),
                line,
                font=font,
                fill="white",
                stroke_width=stroke_width,
                stroke_fill="black"
            )

        return img
    
    def _get_contrast_color(self, image: Image.Image, text_bbox: tuple) -> tuple:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞"""
        region = image.crop(text_bbox)
        np_region = np.array(region)
        if np_region.size == 0:
            return (255, 255, 255)  # Fallback
        
        avg_color = np.mean(np_region, axis=(0, 1))
        brightness = 0.299 * avg_color[0] + 0.587 * avg_color[1] + 0.114 * avg_color[2]
        return (0, 0, 0) if brightness > 127 else (255, 255, 255)

    def generate_cover(
        self,
        image_path: str,
        title: str,
        emoji: str = "‚ú®"
    ) -> str:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with Image.open(image_path) as img:
                img = img.convert('RGB')
                
                # –†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞
                blurred = img.filter(ImageFilter.GaussianBlur(10))
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
                gradient = self._create_gradient(*img.size)
                composite = Image.alpha_composite(
                    blurred.convert('RGBA'), 
                    gradient
                )
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
                emoji_size = min(img.size) // 5
                emoji_img = self._get_emoji_image(random.choice(emoji), emoji_size)
                composite.paste(
                    emoji_img,
                    ((img.width - emoji_size)//2, 20),
                    emoji_img
                )
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                final_image = self._add_text_layer(composite, title)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                output_dir = Path("output/covers")
                output_dir.mkdir(parents=True, exist_ok=True)
                save_path = output_dir / f"cover_{int(time.time())}.png"
                final_image.save(save_path, "PNG", quality=95)
                
                logger.success(f"Cover saved to: {save_path}")
                return str(save_path)
                
        except Exception as e:
            logger.critical(f"Cover generation failed: {str(e)}")
            return ""
        
    async def generate_first_page(
        self,
        prompt: str,
        initial_photo: str
    ) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏."""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            title, emoji = self.generate_clickbait_title(prompt)
            logger.debug(f"Using title: {title} {emoji}")

            return self.generate_cover(initial_photo, title, emoji), title
            
        except Exception as e:
            logger.critical("Cover generation failed: {}", str(e))
            return None, None
        
    def _get_emoji_font(self, font_size: int) -> ImageFont.FreeTypeFont:
        """–®—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏"""
        emoji_fonts = [
            "Segoe UI Emoji.ttf",  # Windows
            "Apple Color Emoji.ttf",  # macOS
            "NotoColorEmoji.ttf",  # Linux
            "arial.ttf"  # Fallback
        ]
        for font_file in emoji_fonts:
            try:
                path = self._find_font(font_file)
                if path:
                    return ImageFont.truetype(path, font_size)
            except Exception:
                continue
        return ImageFont.load_default()

    def _add_emoji(self, draw: ImageDraw.Draw, text: str, position: tuple, font_size: int):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–º–æ–¥–∑–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º"""
        emoji_font = self._get_emoji_font(font_size)
        draw.text(position, text, font=emoji_font, embedded_color=True)

    def _draw_text_with_emojis(self, draw: ImageDraw.Draw, text: str, x: int, y: int, main_font: ImageFont.FreeTypeFont, emoji_size: int):
        """–°–æ–≤–º–µ—â–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —ç–º–æ–¥–∑–∏"""
        current_x = x
        for char in text:
            if emoji.is_emoji(char):
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–º–æ–¥–∑–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
                self._add_emoji(draw, char, (current_x, y), emoji_size)
                current_x += emoji_size  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            else:
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                draw.text((current_x, y), char, font=main_font)
                current_x += main_font.getlength(char)
        

def generate_first_page(prompt: str, initial_photo) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–ª–æ–∂–∫—É –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    
    Args:
        prompt: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        initial_photo: –ü—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–æ–∂–∫–∏
        
    Returns:
        str: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    async def _async_generate(prompt : str, initial_photo : str) -> str:
            generator = CoverGeneratorEnhanced()
            return await generator.generate_first_page(prompt=prompt, initial_photo=initial_photo)

    try:
        return asyncio.run(_async_generate(prompt=prompt, initial_photo=initial_photo))
    except Exception as e:
        logger.error("Generation failed: {}", str(e))
        return "", ""